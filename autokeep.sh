#!/bin/bash

set -e

# =============================================
# 0. Khai b√°o chung
# =============================================
USER_NAME=$(whoami)
HOME_DIR="/home/$USER_NAME"
WORK_DIR="$HOME_DIR/iniminer"
SCRIPT_PATH="$HOME_DIR/run_iniminer.sh"
MINER_BINARY="iniminer-linux-x64"
MINER_URL="https://github.com/Project-InitVerse/ini-miner/releases/download/v1.0.0/iniminer-linux-x64"
POOL="stratum+tcp://0xc4b20dd83e9de7cb829dea7e6beba5cd58e1c757.Worker001@pool-b.yatespool.com:32488"
SERVICE_FILE="/etc/systemd/system/iniminer.service"
MONITOR_SCRIPT="$HOME_DIR/monitor.sh"

# =============================================
# 1. Thi·∫øt l·∫≠p Miner ch·∫°y n·ªÅn b·∫±ng systemd
# =============================================
echo "‚úÖ Thi·∫øt l·∫≠p Miner..."

if [ ! -f "$WORK_DIR/$MINER_BINARY" ]; then
    echo "‚ö° Miner ch∆∞a t·ªìn t·∫°i, t·∫£i v·ªÅ..."

    mkdir -p "$WORK_DIR"
    cd "$WORK_DIR" || exit 1

    wget "$MINER_URL" -O "$MINER_BINARY"
    chmod +x "$MINER_BINARY"

    cat <<EOF > "$SCRIPT_PATH"
#!/bin/bash
cd "$WORK_DIR" || exit 1
while true; do
    echo "Starting miner..."
    ./"$MINER_BINARY" --pool "$POOL"
    echo "Miner crashed. Restarting in 5 seconds..."
    sleep 5
done
EOF

    chmod +x "$SCRIPT_PATH"
else
    echo "‚úî Miner ƒë√£ t·ªìn t·∫°i, b·ªè qua t·∫£i l·∫°i."
fi

if [ ! -f "$SERVICE_FILE" ]; then
    echo "‚ö° T·∫°o systemd service cho miner..."

    sudo bash -c "cat <<EOF > $SERVICE_FILE
[Unit]
Description=INI Miner Service
After=network.target

[Service]
User=$USER_NAME
Environment=HOME=$HOME_DIR
WorkingDirectory=$HOME_DIR
ExecStart=/bin/bash $SCRIPT_PATH
Restart=always
RestartSec=5
StandardOutput=append:$WORK_DIR/miner.log
StandardError=append:$WORK_DIR/miner_error.log

[Install]
WantedBy=multi-user.target
EOF"

    sudo systemctl daemon-reload
    sudo systemctl enable iniminer.service
fi

sudo systemctl restart iniminer.service
echo "‚úî Miner ƒëang ch·∫°y. (sudo systemctl status iniminer)"

# =============================================
# 2. Thi·∫øt l·∫≠p monitor.sh t·ª± ƒë·ªông (kh√¥ng h·ªèi)
# =============================================
echo
echo "==== SCRIPT T·ª∞ ƒê·ªòNG THI·∫æT L·∫¨P GI√ÅM S√ÅT VNC ===="

# L·∫•y URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng VNC_URL ho·∫∑c d√πng m·∫∑c ƒë·ªãnh
URL="${VNC_URL:-https://cloudworkstations.dev/vnc.html?autoconnect=true&resize=remote}"

echo "‚ö° S·ª≠ d·ª•ng URL VNC: $URL"

cat > "$MONITOR_SCRIPT" << EOL
#!/bin/bash
URL="$URL"
curl -s "\$URL" > /dev/null 2>&1
echo "\$(date '+%Y-%m-%d %H:%M:%S') - ƒê√£ k·∫øt n·ªëi ƒë·∫øn \$URL" >> "$HOME_DIR/vnc_monitor.log"
tail -n 1000 "$HOME_DIR/vnc_monitor.log" > "$HOME_DIR/vnc_monitor.log.tmp"
mv "$HOME_DIR/vnc_monitor.log.tmp" "$HOME_DIR/vnc_monitor.log"
EOL

chmod +x "$MONITOR_SCRIPT"

# C·∫≠p nh·∫≠t crontab
(crontab -l 2>/dev/null | grep -v "$MONITOR_SCRIPT" ; echo "*/1 * * * * $MONITOR_SCRIPT") | crontab -

echo "‚úî ƒê√£ thi·∫øt l·∫≠p monitor.sh v·ªõi URL: $URL"

# =============================================
# 3. C√†i caffeine (n·∫øu ch∆∞a) v√† ch·∫°y ng·∫ßm
# =============================================
if ! command -v caffeine &> /dev/null; then
    echo ">>> C√†i ƒë·∫∑t caffeine..."
    sudo apt update
    sudo apt install -y caffeine
fi

caffeine & disown > /dev/null 2>&1

# =============================================
# 4. Th√¥ng b√°o ho√†n t·∫•t
# =============================================
echo
echo "üöÄ Setup ho√†n t·∫•t!"
echo "‚ö° Xem log miner: tail -f $WORK_DIR/miner.log"
echo "‚ö° Xem log VNC: tail -f $HOME_DIR/vnc_monitor.log"
